box:
  id: openjdk:8-jdk
  ports:
    - 8080

services:
  - redis

dev:
  steps:
    - script:
      name: info/env
      code: env
    - internal/watch:
      name: Run and Watch
      code: |
        ./gradlew bootRun
      reload: true

build:
  steps:
    - script:
      name: info/env
      code: env
    - script:
        name: gradle build
        code: |
          ./gradlew --full-stacktrace -q --project-cache-dir=$WERCKER_CACHE_DIR build

integration-test:
  steps:
    - script:
        name: Run and IT
        code: |
          java -jar $WERCKER_ROOT/build/libs/cowweb-2.0.jar &
          sleep 5
          ./gradlew --full-stacktrace -q --project-cache-dir=$WERCKER_CACHE_DIR integrationTest

push-to-releases:
  steps:
    - internal/docker-push:
        username: $REGISTRY_USERNAME
        password: $REGISTRY_PASSWORD
        repository: iad.ocir.io/hhiroshell1/acme-dev
        tag: 2.0
        ports: 8080

deploy-to-cluster:
  box:
    id: alpine
    cmd: /bin/sh
  steps:
    - kubectl:
        name: connection testing
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: get nodes

#    - script:
#        name: wait to delete namespace
#        code: sleep 30
#
#    - kubectl:
#        name: create namespace
#        server: $KUBERNETES_MASTER
#        token: $KUBERNETES_TOKEN
#        insecure-skip-tls-verify: true
#        command: create namespace $WERCKER_APPLICATION_OWNER_NAME
#
#    - kubectl:
#        name: create OCR secret
#        server: $KUBERNETES_MASTER
#        token: $KUBERNETES_TOKEN
#        insecure-skip-tls-verify: true
#        command: create secret docker-registry wrelease --docker-server=wcr.io --docker-username=$WERCKER_APPLICATION_OWNER_NAME --docker-password=$KUBERNETES_TOKEN --docker-email=${WERCKER_APPLICATION_OWNER_NAME}@mail.com --namespace=$WERCKER_APPLICATION_OWNER_NAME
#
#    - kubectl:
#        name: create deplyoment
#        server: $KUBERNETES_MASTER
#        token: $KUBERNETES_TOKEN
#        insecure-skip-tls-verify: true
#        command: create -f $WERCKER_ROOT/kubernetes-deployment.yml --namespace=$WERCKER_APPLICATION_OWNER_NAME
#
#    - script:
#        name: "Visualise Ingress config"
#        code: cat ingress.yml
#
#    - kubectl:
#        name: create Ingress configuration
#        server: $KUBERNETES_MASTER
#        token: $KUBERNETES_TOKEN
#        insecure-skip-tls-verify: true
#        command: create -f $WERCKER_ROOT/ingress.yml --namespace=$WERCKER_APPLICATION_OWNER_NAME
#
#    - kubectl:
#        name: get LoadBalancer public IP address
#        server: $KUBERNETES_MASTER
#        token: $KUBERNETES_TOKEN
#        insecure-skip-tls-verify: true
#        command: get svc -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' --all-namespaces
